/*
 * File: VirtualMemoryManager.cpp
 *
 * The class for managing memory
 *
 * Header: VirtualMemoryManager.h
 * Author: CSE410 Spring 2012
 *
 */

#include "VirtualMemoryManager.h"
#include "Reference.h"
#include "ReferenceGenerator.h"

#include <cstdio>
#include <iostream>
using namespace std;

// constants specified in the specification of project 5
const int Interval = 50;
const double PageTableTime = 0.00000012;
const double TLBTime = 0.00000003;
const  double PageFaultTime = 0.035;

/*
 * Name :        VirtualMemoryManager::VirtualMemoryManager()
 * Description : Default constructor
 * Note :
 */
VirtualMemoryManager::VirtualMemoryManager()
{
	// default values
	mProcessNumber = 1;
	mTLBSize = 0;
	mPageOffset = 8;
	mTotalReferenceNumber = 200;
	mMemoryFrameNumber = 32;
}

/*
 * Name :        VirtualMemoryManager::~VirtualMemoryManager()
 * Description : Default destructor
 * Note :
 */
VirtualMemoryManager::~VirtualMemoryManager()
{
	// clean up all references created by "new"
	while(mReferences.size()!= 0)
	{
		Reference* r = mReferences.back();
		delete r;
		mReferences.pop_back();
	}
}

void VirtualMemoryManager::Start()
{
	// we need to get references before doing any operations
	RetrieveReferences();
	// Initialize Page Table. Memory, TLB Here!!
	// you can uncomment these lines to have a view of generated references
	/*
	cout<<"# of references ="<<mReferences.size()<<endl;
	for(unsigned int i = 0; i<mReferences.size(); i++)
	{
		mReferences[i]->Print();
	}
	*/
	processReferences();
}

/*
 * Name :        VirtualMemoryManager::RetrieveReferences()
 * Description : store all the references generated by
 * 				 ReferenceGenerator in mReferences
 * Note :
 */
void VirtualMemoryManager::RetrieveReferences()
{
	// instantiate an object of ReferenceGenerator
	ReferenceGenerator myGenerator(GetProcessNumber(), GetTotalReferenceNumber(), this);

	Reference* ref = NULL;

	// push all references to mReferences
	while((ref = myGenerator.GenerateReference()) != NULL)
	{
		mReferences.push_back(ref);
	}
}

void VirtualMemoryManager::processReferences()
{
  for(unsigned int i = 0; i<mReferences.size(); i++)
	{
	// Process the references one by one
	//myTLB->print();
	cout << "***************************************************\n";
	cout << "                      final Result\n";
	cout << "***************************************************\n\n";
	myMemory->print();

	cout << " total time : " <<setprecision (9)<< totalTime << endl;

}
